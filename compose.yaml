###################################################
# Services
#
# The services define the individual components of our application stack.
# For each service, a separate container will be launched.
###################################################
services:
  ###################################################
  # Service: proxy
  #
  # This service is a reverse proxy that will route requests to the appropriate
  # service. Think of it like a HTTP router or a load balancer. It simply
  # forwards requests and allows us to simulate the final version of the
  # application. We can also use it to route requests to adminer, which won't be
  # accessible at localhost, but at db.localhost.
  #
  # The image for this service comes directly from Docker Hub and is a Docker
  # Official Image. Since Traefik can be configured in a variety of ways, we
  # configure it here to watch the Docker events for new containers and to use
  # their labels for configuration. That's why the Docker socket is mounted.
  #
  # We also expose port 80 to connect to the proxy from the host machine.
  ###################################################
  proxy:
    image: traefik:v3.4
    command: --providers.docker
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  ###################################################
  # Service: app
  #
  # The app service is the React app that provides the frontend for the app.
  # When the container starts, it will use the image that results from building
  # the Dockerfile, targeting the dev stage.
  #
  # The Compose Watch configuration is used to automatically sync the code from
  # the host machine to the container. This allows the client to be automatically
  # reloaded when code changes are made.
  #
  # The labels are used to configure Traefik (the reverse proxy) with the
  # appropriate routing rules. In this case, all requests to localhost will be
  # forwarded to this service's port 3000.
  ###################################################
  app:
    build:
      context: ./
      target: base
    volumes:
      - ./:/usr/local/app
      - /usr/local/app/node_modules
    labels:
      traefik.http.routers.client.rule: Host(`localhost`)
      traefik.http.services.client.loadbalancer.server.port: 3000

  ###################################################
  # Service: postgres
  #
  # The postgres service is used to provide the database for the application.
  # The image for this service comes directly from Docker Hub and is a Docker
  # Official Image.

  # The data is persisted in a volume named postgres-data. Using a volume
  # allows us to take down the services without losing the data. When we start
  # the services again, the data will still be there (assuming we didn't delete
  # the volume, of course!).
  #
  # The environment variables configure the password of the database to create.
  # Since these are used only for local development, it's ok to hard-code them here.
  ###################################################
  postgres:
    image: postgres:17
    restart: always
    shm_size: 128mb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: password

  ###################################################
  # Service: adminer
  #
  # This service provides a web interface to the PostgreSQL database. It's useful
  # for debugging and troubleshooting data, schemas, and more. The image for
  # this service comes directly from Docker Hub and is a Docker Official Image.
  #
  # The labels are used to configure Traefik (the reverse proxy) with the
  # routing rules. In this case, all requests to db.localhost will be forwarded
  # to this service's port 80.
  ###################################################
  adminer:
    image: adminer
    restart: always
    labels:
      traefik.http.routers.adminer.rule: Host(`db.localhost`)
      traefik.http.services.adminer.loadbalancer.server.port: 8080

###################################################
# Volumes
#
# For this application stack, we only have one volume. It's used to persist the
# data for the PostgreSQL service. We are only going to use the default values,
# hence the lack of any configuration for the volume.
###################################################
volumes:
  postgres-data:
